*1 SQL-query:

CREATE SCHEMA IF NOT EXISTS pandemic;

USE pandemic;

*2 SQL-query:

USE pandemic;

CREATE TABLE countries(
id INT PRIMARY KEY AUTO_INCREMENT,
code VARCHAR(8) UNIQUE,
country VARCHAR(32) NOT NULL UNIQUE
);

INSERT INTO countries (code, country)
SELECT DISTINCT code, entity FROM infectious_cases;

CREATE TABLE infectious_cases_normalized 
AS SELECT * FROM infectious_cases;

ALTER TABLE infectious_cases_normalized
ADD id INT PRIMARY KEY AUTO_INCREMENT FIRST,
ADD country_id INT AFTER id,
ADD CONSTRAINT fk_country_id FOREIGN KEY (country_id) REFERENCES countries(id);

UPDATE infectious_cases_normalized i, countries c  
SET i.country_id = c.id WHERE c.code = i.code;

ALTER TABLE infectious_cases_normalized
DROP COLUMN entity,
DROP COLUMN code;

*3 SQL-query:

USE pandemic;

SELECT 
Entity,
Code,
AVG(number_rabies) AS average_value,
MIN(number_rabies) AS min_value, 
MAX(number_rabies) AS max_value, 
SUM(number_rabies) AS sum_value

FROM infectious_cases_normalized

WHERE number_rabies IS NOT NULL AND number_rabies <> ''

GROUP BY Entity, Code

ORDER BY average_value DESC
LIMIT 10;

*4 SQL-query:

USE pandemic;

SELECT
MAKEDATE(year, 1) first_jan_of_year,
CURDATE() today,

TIMESTAMPDIFF(YEAR, MAKEDATE(year, 1), CURDATE())  year_difference
FROM
infectious_cases_normal

*5 SQL-query:

SELECT * FROM infectious_cases_normalized;

*6 SQL-query:

DROP FUNCTION IF EXISTS fn_subtract_now_year;

DELIMITER //

CREATE FUNCTION fn_subtract_now_year(year INT)
RETURNS INT
DETERMINISTIC 
NO SQL
BEGIN
    DECLARE result INT;
    SET result = YEAR(CURDATE()) - year;
    RETURN result;
END //

DELIMITER ;

SELECT fn_subtract_now_year(1984);

*7 SQL-query:

DROP FUNCTION IF EXISTS fn_calc_illnesses_per_period;

DELIMITER //

CREATE FUNCTION fn_calc_illnesses_per_period(num_illnesses_per_year DOUBLE, period INT)
RETURNS DOUBLE
DETERMINISTIC 
NO SQL
BEGIN
    DECLARE result DOUBLE;
    SET result = num_illnesses_per_year / period;
    RETURN result;
END //

DELIMITER ;

SELECT fn_calc_illnesses_per_period(20000, 4);

-----------------------------------------------------------------------------------------------------------